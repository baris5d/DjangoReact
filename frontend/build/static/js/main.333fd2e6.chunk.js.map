{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["getCookie","name","cookieValue","document","cookie","cookies","split","i","length","trim","substring","decodeURIComponent","SendBook","props","useState","author","description","book","setBook","handleChange","event","target","value","className","onSubmit","e","axios","defaults","xsrfCookieName","xsrfHeaderName","preventDefault","post","headers","then","response","console","log","catch","error","type","onChange","Book","to","id","App","books","setBooks","hasError","setErrors","useEffect","a","fetch","json","res","err","fetchBooks","map","item","index","key","SingularBook","params","useParams","setError","status","Landing","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.333fd2e6.chunk.js","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport { useParams } from 'react-router-dom'\nimport axios from 'axios'\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\n\n\n//import './App.css';\nfunction getCookie(name) {\n    let cookieValue = null;\n    if (document.cookie && document.cookie !== '') {\n        const cookies = document.cookie.split(';');\n        for (let i = 0; i < cookies.length; i++) {\n            const cookie = cookies[i].trim();\n            // Does this cookie string begin with the name we want?\n            if (cookie.substring(0, name.length + 1) === (name + '=')) {\n                cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n                break;\n            }\n        }\n    }\n    return cookieValue;\n}\n\nfunction SendBook(props){\n  const [book, setBook] = useState(\n      { name : \"\", author: \"\", description: \"\"}\n  );\n  const handleChange = (event) => {\n      setBook({...book, [event.target.name]: event.target.value})\n  }\n  const handleSubmit = (e) => {\n  \n    axios.defaults.xsrfCookieName ='csrftoken';\n    axios.defaults.xsrfHeaderName ='X-CSRFToken';\n    e.preventDefault()\n      axios.post('http://127.0.0.1:8000/create-book', book, {headers: {\"X-CSRFToken\" : getCookie('csrftoken')}})\n        .then(function (response) {\n            console.log(response)\n        })\n        .catch(function (error) {\n            console.log(error)\n        }) \n  }\n  return(\n    <div className=\"book-create\">\n      <h1> DjangoReact - Create Book</h1>\n      <form onSubmit={handleSubmit}>\n        <input type=\"text\" name=\"name\" value={book.name} onChange={handleChange} />\n        <input type=\"text\" name=\"author\" value={book.author} onChange={handleChange} />\n       <textarea name=\"description\" value={book.description} onChange={handleChange} ></textarea>\n      <button> Save </button>\n      </form>\n    </div>\n  )\n}\n\n\nfunction Book(props){\n  const {book} = props\n  return(\n    <div className=\"book-item\">\n      <Link to ={\"/book/\"+book.id}><h2>{book.name}</h2></Link>\n      <p>{book.author}</p>\n      <p>{book.description}</p>\n    </div>\n  )\n}\n\nfunction App() {\n  const[books,setBooks] = useState([])\n  const[hasError, setErrors] = useState(false)\n\n  useEffect (() => {\n    async function fetchBooks() {\n      const res = await fetch(\"http://127.0.0.1:8000/books/\");\n      res\n        .json()\n        .then(res => setBooks(res.response))\n        .catch(err => setErrors(err));\n    }\n\n    fetchBooks();\n  },[])\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>DjangoReact - Books List</h1>\n      </header>\n      <div className=\"book-list\">\n          {books.map((item,index) => {\n            return (\n              <Book book={item} key={index}/>\n            )}\n          )}\n          {hasError}\n      </div>\n    </div>\n  );\n}\n\nfunction SingularBook(params) {\n  const{ id } = useParams()\n  const[book,setBook] = useState([])\n  const[error, setError] = useState(false)\n\n  useEffect (() => {\n    async function fetchBooks() {\n      const res = await fetch(\"http://127.0.0.1:8000/books/\"+id);\n      res\n        .json()\n        .then(res => setBook(res))\n        .catch(err => setError(err));\n    }\n\n    fetchBooks();\n  },[])\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n      </header>\n    \n          { error || book.status===\"error\" ? \n           <p>Something went wrong</p>\n           :\n           <div className=\"book-list\">\n              <h1>{book.name}</h1>\n              <h3>{book.author}</h3>\n              <p>{book.description}</p>\n           </div>          \n          }\n    </div>\n  );\n}\n\nexport default function Landing(){\n  return(\n    <Router>\n      <div>\n        <nav>\n          <ul>\n            <li>\n              <Link to=\"/\">Book list</Link>\n            </li>\n            <li>\n              <Link to=\"/create-book\">Create Book </Link>\n            </li>\n          </ul>\n        </nav>\n\n        <Switch>\n          <Route path=\"/book/:id\">\n            <SingularBook />\n          </Route>\n          <Route path=\"/create-book\">\n            <SendBook />\n          </Route>\n          <Route path=\"/\">\n            <App />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  )\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Landing from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Landing />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}